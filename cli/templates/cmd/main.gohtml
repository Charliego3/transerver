package main

import (
	"github.com/google/wire"
{{- if eq .HsOpt 0 }}
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
{{- end }}
{{- if .UsingCfgOpt }}
	"github.com/transerver/commons/configs"
{{- end }}
{{- if .UsingETCDOpt }}
	"github.com/transerver/commons/etcds"
{{- end }}
{{- if le .HsOpt 1 }}
	"github.com/transerver/commons/hs"
{{- end }}
{{- if .UsingRedisOpt }}
	"github.com/transerver/commons/redis"
{{- end }}
{{- if $.UsingGRPCOpt }}
	"google.golang.org/grpc"
{{- end }}
{{- if .UsingLogOpt }}
	"io"
{{- end }}
	"{{ printf "%s/internal/biz" .ModURL }}"
	"{{ printf "%s/internal/conf" .ModURL }}"
	"{{ printf "%s/internal/data" .ModURL }}"
	"{{ printf "%s/internal/service" .ModURL }}"
)

var providerSet = wire.NewSet(
{{- if .UsingCfgOpt }}
    NewCfgOpts,
{{- end }}
{{- if .UsingETCDOpt }}
    NewETCDOpts,
{{- end }}
{{- if $.UsingGRPCOpt }}
    NewGRPCOpts,
{{- end }}
{{- if eq .HsOpt 0 }}
    NewHTTPServeMuxOpts,
{{- end }}
{{- if le .HsOpt 1 }}
    NewHTTPHandlerOpts,
{{- end }}
{{- if .UsingLogOpt }}
    NewLoggerWriter,
{{- end }}
{{- if .UsingRedisOpt }}
    NewRedisOpts,
{{- end }}
	biz.ProviderSet,
	conf.ProviderSet,
	data.ProviderSet,
	service.ProviderSet,
)

func main() {
	app, cleanup, err := wireApp()
	if err != nil {
		panic(err)
	}

	defer cleanup()
	app.Run()
}
{{- if .UsingCfgOpt }}

func NewCfgOpts() []configs.Option {
	return []configs.Option{}
}
{{- end }}
{{- if .UsingETCDOpt }}

func NewETCDOpts() []etcds.Option {
	return []etcds.Option{}
}
{{- end }}
{{- if .UsingGRPCOpt }}

func NewGRPCOpts() []grpc.ServerOption {
	return []grpc.ServerOption{}
}
{{- end }}
{{- if eq .HsOpt 0 }}

func NewHTTPServeMuxOpts() []runtime.ServeMuxOption {
	return hs.DefaultServeMuxOpts()
}
{{- end }}
{{- if le .HsOpt 1 }}

func NewHTTPHandlerOpts() []hs.Handler {
	return []hs.Handler{}
}
{{- end }}
{{- if .UsingLogOpt }}

func NewLoggerWriter() io.Writer {
	return io.Discard
}
{{- end }}
{{- if .UsingRedisOpt }}

func NewRedisOpts() []redis.Option {
	return []redis.Option{}
}
{{- end }}
