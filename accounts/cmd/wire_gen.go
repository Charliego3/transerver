// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/transerver/accounts/internal/biz"
	"github.com/transerver/accounts/internal/conf"
	"github.com/transerver/accounts/internal/data"
	"github.com/transerver/accounts/internal/service"
	"github.com/transerver/commons"
	"github.com/transerver/commons/configs"
	"github.com/transerver/commons/gs"
	"github.com/transerver/commons/hs"
	"github.com/transerver/commons/logger"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func wireApp() (*commons.App, func(), error) {
	v := conf.NewBootstrap()
	v2 := NewCfgOpts()
	iConfig, err := configs.Parse(v, v2...)
	if err != nil {
		return nil, nil, err
	}
	writer := NewLoggerWriter()
	zapLogger, cleanup := logger.NewLogger(iConfig, writer)
	dataData, cleanup2, err := data.NewData(iConfig, zapLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	accountRepo := data.NewAccountRepo(dataData, zapLogger)
	accountUsecase := biz.NewAccountUsecase(accountRepo, zapLogger)
	rsaRepo := data.NewRsaRepo(dataData, zapLogger)
	rsaUsecase := biz.NewRsaUsecase(rsaRepo, zapLogger)
	accountService := service.NewAccountService(accountUsecase, rsaUsecase, zapLogger)
	rsaService := service.NewRsaService(rsaUsecase, zapLogger)
	v3 := service.MakeServices(accountService, rsaService)
	v4 := NewHTTPOptions()
	server, err := hs.NewHTTPServer(zapLogger, v3, v4...)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v5 := NewGRPCOpts()
	gsServer, cleanup3 := gs.NewGRPCServer(zapLogger, v3, v5...)
	app := commons.NewApp(iConfig, zapLogger, server, gsServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func NewGRPCOpts() []gs.Option {
	return []gs.Option{gs.WithAuthFunc(func(ctx context.Context) (context.Context, error) {
		if method, ok := grpc.Method(ctx); ok {
			fmt.Println("GRPC Method:", method)
		}
		return ctx, nil
	}),
	}
}
