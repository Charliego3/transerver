// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: regions.sql

package db

import (
	"context"
	"encoding/json"
)

const regionByCode = `-- name: RegionByCode :one
SELECT id, code, area, img, name FROM regions WHERE code = $1
`

func (q *Queries) RegionByCode(ctx context.Context, code string) (Region, error) {
	row := q.db.QueryRowContext(ctx, regionByCode, code)
	var i Region
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Area,
		&i.Img,
		&i.Name,
	)
	return i, err
}

const regionCreate = `-- name: RegionCreate :one
INSERT INTO regions(code, area, img, name) VALUES ($1, $2, $3, $4) RETURNING id, code, area, img, name
`

type RegionCreateParams struct {
	Code string          `json:"code"`
	Area string          `json:"area"`
	Img  string          `json:"img"`
	Name json.RawMessage `json:"name"`
}

func (q *Queries) RegionCreate(ctx context.Context, arg RegionCreateParams) (Region, error) {
	row := q.db.QueryRowContext(ctx, regionCreate,
		arg.Code,
		arg.Area,
		arg.Img,
		arg.Name,
	)
	var i Region
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Area,
		&i.Img,
		&i.Name,
	)
	return i, err
}

const regionList = `-- name: RegionList :many
SELECT id, code, area, img, name FROM regions
`

func (q *Queries) RegionList(ctx context.Context) ([]Region, error) {
	rows, err := q.db.QueryContext(ctx, regionList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Region
	for rows.Next() {
		var i Region
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Area,
			&i.Img,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
