// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const accountById = `-- name: AccountById :one
SELECT id, create_at, update_at, user_id, region, username, area, phone, email, avatar, password, pwd_level, platform, state
FROM accounts
WHERE id = $1
`

func (q *Queries) AccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, accountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.UserID,
		&i.Region,
		&i.Username,
		&i.Area,
		&i.Phone,
		&i.Email,
		&i.Avatar,
		&i.Password,
		&i.PwdLevel,
		&i.Platform,
		&i.State,
	)
	return i, err
}

const accountCreate = `-- name: AccountCreate :one
INSERT INTO accounts (
    create_at,
    user_id,
    username,
    region,
    area,
    phone,
    email,
    avatar,
    password,
    pwd_level,
    platform
) VALUES (
    NOW(), $1, $2, $3, $4,
    $5, $6, $7, $8, $9, $10
) RETURNING id, create_at, update_at, user_id, region, username, area, phone, email, avatar, password, pwd_level, platform, state
`

type AccountCreateParams struct {
	UserID   string         `json:"userID"`
	Username string         `json:"username"`
	Region   string         `json:"region"`
	Area     string         `json:"area"`
	Phone    sql.NullString `json:"phone"`
	Email    sql.NullString `json:"email"`
	Avatar   sql.NullString `json:"avatar"`
	Password []byte         `json:"password"`
	PwdLevel int16          `json:"pwdLevel"`
	Platform string         `json:"platform"`
}

func (q *Queries) AccountCreate(ctx context.Context, arg AccountCreateParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, accountCreate,
		arg.UserID,
		arg.Username,
		arg.Region,
		arg.Area,
		arg.Phone,
		arg.Email,
		arg.Avatar,
		arg.Password,
		arg.PwdLevel,
		arg.Platform,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.UserID,
		&i.Region,
		&i.Username,
		&i.Area,
		&i.Phone,
		&i.Email,
		&i.Avatar,
		&i.Password,
		&i.PwdLevel,
		&i.Platform,
		&i.State,
	)
	return i, err
}

const accountExistByPhone = `-- name: AccountExistByPhone :one
SELECT true::bool
FROM accounts
WHERE phone = $1
`

func (q *Queries) AccountExistByPhone(ctx context.Context, phone sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, accountExistByPhone, phone)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const accountExistsByEmail = `-- name: AccountExistsByEmail :one
SELECT true::bool
FROM accounts
WHERE email = $1
`

func (q *Queries) AccountExistsByEmail(ctx context.Context, email sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, accountExistsByEmail, email)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
