// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/transerver/accounts/internal/ent/region"
)

// Region is the model entity for the Region schema.
type Region struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Area holds the value of the "area" field.
	Area string `json:"area,omitempty"`
	// Img holds the value of the "img" field.
	Img string `json:"img,omitempty"`
	// Name holds the value of the "name" field.
	Name struct {
		En string
		Zh string
	} `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Region) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case region.FieldName:
			values[i] = new([]byte)
		case region.FieldID:
			values[i] = new(sql.NullInt64)
		case region.FieldCode, region.FieldArea, region.FieldImg:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Region", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Region fields.
func (r *Region) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case region.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case region.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				r.Code = value.String
			}
		case region.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				r.Area = value.String
			}
		case region.FieldImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img", values[i])
			} else if value.Valid {
				r.Img = value.String
			}
		case region.FieldName:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Name); err != nil {
					return fmt.Errorf("unmarshal field name: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Region.
// Note that you need to call Region.Unwrap() before calling this method if this Region
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Region) Update() *RegionUpdateOne {
	return (&RegionClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Region entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Region) Unwrap() *Region {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Region is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Region) String() string {
	var builder strings.Builder
	builder.WriteString("Region(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("code=")
	builder.WriteString(r.Code)
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(r.Area)
	builder.WriteString(", ")
	builder.WriteString("img=")
	builder.WriteString(r.Img)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fmt.Sprintf("%v", r.Name))
	builder.WriteByte(')')
	return builder.String()
}

// Regions is a parsable slice of Region.
type Regions []*Region

func (r Regions) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
